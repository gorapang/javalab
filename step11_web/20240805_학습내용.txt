학습내용

1. log4j 활용 연습
	- log file자동 생성
		- 로그 레벨 수정하면서 매핑된 메소드 실행 여부 확인
	- 메소드로 출력 제어
	- 시스템 시간 변경하면서 백업 로그 파일 생성확인
		
2. servlet api 개발 기술
	- java기반의 웹 원조 스펙
	- http 통신이 가능한 유일한 자바 파일
	
	- jsp 근원
		- jsp파일은 html/css/javascript/java tag로 구성된 웹 브라우저 출력 스펙
		- jsp요청시 servlet 자동 변환
		
	- http 요청 및 처리 방식
		1. get 방식 - 데이터 검색
		2. post 방식 - 데이터 저장 및 수정
		3. delete 방식 - 삭제
		4. update 방식 - update
		
	- web page 이동 api
		- 모든 웹 개발 스펙 공통 방식 
		1. html 코드로 처리 방식
		
		2. servlet api 처리 방식
			- forwarding
			- redirect
	
	- client 의 지속성 상태 관리 기술
		- 웹 기본 스펙 : 무상태연결 유지
		- 로그인~로그아웃 까지의 지속성 상태 유지는 코드 개발
		- 모든 웹 개발 스펙 공통 방식 
		1. javax.servlet.http.HttpSession
			- server 메모리에 상태값 저장
		2. javax.servlet.http.Cookie
			- client 시스템에 상태값 저장 
		
		
3. web page이동 방식
4. client상태 유지를 위한 세션과 쿠키
5. UI 템플릿 반영

----------------------------

1. log4j framework의 설정 파일
 - file명 고정 - log4j.properties
 - 위치 - java소스 경로에 함께 적용
 - 소스 부연 설명
 	log4j.rootCategory=info, file, CONSOLE
 		log4j.rootCategory : 어디에 어떤 형식으로 출력할 것인지 지정하는 영역
 		info : 표현하고자 하는 로그 레벨
 			trace > debug > info > warn > error > fatal
		file, CONSOLE : 사용자 정의 순수 이름
			file : 출력 목적지가 file의
			CONSOLE : 출력 목적지가 서버 콘솔창

log4j.rootCategory=info, file, CONSOLE


# CONSOLE is set to be a ConsoleAppender using a PatternLayout.
log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout
log4j.appender.CONSOLE.layout.ConversionPattern=%m%n


log4j.appender.file=org.apache.log4j.DailyRollingFileAppender
log4j.appender.file.File=C:\\01.lab\\00.log\\logoutput.log
log4j.appender.file.DatePattern='.'yyyy-MM-dd
log4j.appender.file.Append=true
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n

 
#log4j.logger.org.hibernate=OFF
#log4j.loggerjavax.persistence=OFF